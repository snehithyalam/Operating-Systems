#include <stdio.h>

struct process {
    int id;
    int arrival_time;
    int execution_time;
    int waiting_time;
    int turnaround_time;
};

void swap(struct process *a, struct process *b) {
    struct process temp = *a;
    *a = *b;
    *b = temp;
}


void sortProcesses(struct process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            // Sort by execution time
            if (processes[i].execution_time > processes[j].execution_time) {
                swap(&processes[i], &processes[j]);
            }
            // If execution times are equal, sort by arrival time
            else if (processes[i].execution_time == processes[j].execution_time && processes[i].arrival_time > processes[j].arrival_time) {
                swap(&processes[i], &processes[j]);
            }
        }
    }
}

void calculateTimes(struct process processes[], int n) {
    sortProcesses(processes, n); // Sort processes based on execution time and arrival time
    int total_waiting_time = 0;
    int current_time = 0; // Track current time

    for (int i = 0; i < n; i++) {
        if (current_time < processes[i].arrival_time) {
            current_time = processes[i].arrival_time;
        }


        processes[i].waiting_time = current_time - processes[i].arrival_time;


        processes[i].turnaround_time = processes[i].waiting_time + processes[i].execution_time;


        current_time += processes[i].execution_time;

       
        total_waiting_time += processes[i].waiting_time;
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter execution time for process %d: ", i + 1);
        scanf("%d", &processes[i].execution_time);
        processes[i].id = i + 1;
    }

    calculateTimes(processes, n);

    printf("Process\tArrival Time\tExecution Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time, processes[i].execution_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    return 0;
}
